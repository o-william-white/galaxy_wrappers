<tool id="get_organelle_from_reads" name="Get organelle from reads" version="0.1.0" python_template_version="3.5">
    <requirements>
        <requirement type="package" version="1.7.5">GetOrganelle</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
	get_organelle_from_reads.py
        #if str( $fastq_input.fastq_input_selector ) == "single":
	    -u '${fastq_input.fastq_input1}'
        #end if
        #if str($fastq_input.fastq_input_selector) == "paired":
	    -1 '${fastq_input.fastq_input1}' -2 '${fastq_input.fastq_input2}'
        #end if
        -o results_directory -F '$organelle_type'
    ]]></command>
    <inputs>
	<conditional name="fastq_input">
            <param name="fastq_input_selector" type="select" label="Single-end or paired reads">
                <option value="single" selected="true">Single-end</option>
                <option value="paired">Paired</option>
            </param>
            <when value="single">
                <param type="data" name="fastq_input1" format="fastq" label="Single-end fastq"/>
            </when>
            <when value="paired">
                <param type="data" name="fastq_input1" format="fastq" label="Forward fastq"/>
                <param type="data" name="fastq_input2" format="fastq" label="Reverse fastq"/>
            </when>
        </conditional>
        <param type="select" name="organelle_type">
            <option value="embplant_pt" selected="true">Plant chloroplast</option>
            <option value="embplant_mt">Plant mitochondrial</option>
            <option value="embplant_nr">Plant ribosomal</option>
            <option value="fungus_mt">Fungus mitochondrial</option>
            <option value="fungus_nr">Fungus nuclear</option>
            <option value="animal_mt">Animal mitochondrial</option>
            <option value="other_mt">Other mitochondrial</option>
        </param>
    </inputs>
    <outputs>
	<collection name="path_sequence_list" type="list" label='${tool.name} on ${on_string}: Path sequences'>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.path_sequence.fasta" format="Fasta" directory="results_directory" />
        </collection>
        <data format="txt" name="selected_graph" from_work_dir="results_directory/*.selected_graph.gfa" label='${tool.name} on ${on_string}: Selected graph'/>
	<data format="txt" name="logfile" from_work_dir="results_directory/get_org.log.txt" label='${tool.name} on ${on_string}: Logfile'/>
	<data format="Fastg" name="assembly_graph" from_work_dir="results_directory/extended_K*.assembly_graph.fastg" label='${tool.name} on ${on_string}: Raw assembly graph'/>
	<data format="Fastg" name="simplfied_graph" from_work_dir="results_directory/extended_K*.assembly_graph.fastg.extend-*.fastg" label='${tool.name} on ${on_string}: Simplfied graph'/>
	<data format="tsv" name="assembly_csv" from_work_dir="results_directory/extended_K*.assembly_graph.fastg.extend-*.csv" label='${tool.name} on ${on_string}: Contig labels'/>
    </outputs>
    <tests>
	<test>
	    <param name="fastq_input_selector" value="paired"/>	    
            <param name="fastq_input1" value="Arabidopsis_simulated.1.fq.gz"/>
	    <param name="fastq_input2" value="Arabidopsis_simulated.2.fq.gz"/>
	    <param name="organelle_type" value="embplant_pt" />
	    <assert_stdout>
	        <has_text text="Thank you!" />
	    </assert_stdout>
        </test>
    </tests>
    <help><![CDATA[
	    GetOrganelle v1.7.5.3 get_organelle_from_reads.py assembles organelle genomes from genome skimming data. 
	    See https://github.com/Kinggerm/GetOrganelle for more information.
	    ]]></help>
    <citations>
        <citation type="bibtex">
@misc{githubGetOrganelle,
  author = {LastTODO, FirstTODO},
  year = {TODO},
  title = {GetOrganelle},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/Kinggerm/GetOrganelle},
}</citation>
    </citations>
</tool>
